FROM node:18-alpine

# ✅ Configuration réseau améliorée
ENV NPM_CONFIG_FETCH_TIMEOUT=60000
ENV NPM_CONFIG_FETCH_RETRY_MINTIMEOUT=20000
ENV NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT=120000
ENV NPM_CONFIG_FETCH_RETRIES=10

# ✅ Installer toutes les dépendances système
RUN apk add --no-cache \
    build-base \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    python3 \
    make \
    g++ \
    pkgconfig \
    libc6-compat \
    dumb-init

# Créer utilisateur non-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

WORKDIR /app

# ✅ Copier configuration npm AVANT package.json
COPY .npmrc ./

# Copier les fichiers package
COPY package*.json ./

# ✅ Installation avec configuration réseau optimisée
RUN npm config set registry https://registry.npmjs.org && \
    npm ci --omit=dev --verbose && \
    npm cache clean --force

# Créer les dossiers avec permissions
RUN mkdir -p uploads/temp uploads/processed uploads/thumbnails logs && \
    chown -R backend:nodejs uploads/ logs/ && \
    chmod -R 755 uploads/ logs/

# Copier le code source
COPY --chown=backend:nodejs . .

# Passer à l'utilisateur non-root
USER backend

EXPOSE 5000

ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "if [ \"$NODE_ENV\" = \"development\" ]; then npm run dev; else node server.js; fi"]
