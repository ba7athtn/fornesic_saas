#!/usr/bin/env python3
"""
Fix Deepfake Detector - Ba7ath Forensic System
==============================================
Correction du d√©tecteur deepfake avec API Functional
Compatible TensorFlow Hub KerasLayer
"""

import tensorflow as tf
import tensorflow_hub as hub
from pathlib import Path
import numpy as np

def fix_deepfake_detector():
    """Cr√©er d√©tecteur deepfake avec API Functional compatible"""
    print("üîß Correction d√©tecteur deepfake Ba7ath...")
    
    try:
        # ‚úÖ API FUNCTIONAL (compatible avec KerasLayer)
        print("üì• Chargement TensorFlow Hub MobileNetV2...")
        
        # Input layer
        inputs = tf.keras.Input(shape=(224, 224, 3), name='image_input')
        
        # TensorFlow Hub layer (compatible Functional API)
        hub_url = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4"
        
        # Charger le mod√®le Hub
        hub_layer = hub.KerasLayer(hub_url, trainable=False, name='mobilenet_v2_hub')
        
        # Appliquer la couche Hub
        hub_features = hub_layer(inputs)
        
        # Couches de classification forensique
        x = tf.keras.layers.Dense(256, activation='relu', name='forensic_dense1')(hub_features)
        x = tf.keras.layers.Dropout(0.4, name='forensic_dropout1')(x)
        x = tf.keras.layers.Dense(128, activation='relu', name='forensic_dense2')(x)
        x = tf.keras.layers.Dropout(0.3, name='forensic_dropout2')(x)
        
        # Sortie deepfake (probabilit√© 0-1)
        outputs = tf.keras.layers.Dense(1, activation='sigmoid', name='deepfake_probability')(x)
        
        # ‚úÖ MOD√àLE FUNCTIONAL
        model = tf.keras.Model(inputs=inputs, outputs=outputs, name='ba7ath_deepfake_detector')
        
        # Compilation optimis√©e
        model.compile(
            optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
            loss='binary_crossentropy',
            metrics=['accuracy', 'precision', 'recall']
        )
        
        print("‚úÖ Mod√®le Functional cr√©√© avec succ√®s")
        
        # ‚úÖ SAUVEGARDE
        models_dir = Path('models')
        models_dir.mkdir(exist_ok=True)
        
        model_path = models_dir / 'deepfake_detector.h5'
        
        # Sauvegarder avec options optimis√©es
        model.save(
            str(model_path),
            save_format='h5',
            include_optimizer=False  # R√©duire la taille
        )
        
        print(f"‚úÖ D√©tecteur deepfake sauvegard√©: {model_path}")
        
        # ‚úÖ TEST RAPIDE
        print("üß™ Test de fonctionnement...")
        
        # Test avec donn√©es al√©atoires
        test_input = np.random.random((1, 224, 224, 3)).astype(np.float32)
        prediction = model.predict(test_input, verbose=0)
        
        print(f"üìä Test r√©ussi - Forme sortie: {prediction.shape}")
        print(f"üìä Pr√©diction test: {prediction[0][0]:.4f}")
        
        # ‚úÖ INFORMATIONS MOD√àLE
        print(f"\nüìã INFORMATIONS MOD√àLE:")
        print(f"   ‚Ä¢ Param√®tres: {model.count_params():,}")
        print(f"   ‚Ä¢ Taille fichier: {model_path.stat().st_size / 1024 / 1024:.1f}MB")
        print(f"   ‚Ä¢ Architecture: MobileNetV2 + Classification forensique")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation mod√®le: {e}")
        return False

def verify_deepfake_model():
    """V√©rifier que le mod√®le se charge correctement"""
    print("\nüîç V√©rification du mod√®le corrig√©...")
    
    try:
        model_path = Path('models/deepfake_detector.h5')
        
        if not model_path.exists():
            print("‚ùå Fichier mod√®le introuvable")
            return False
        
        # Charger le mod√®le
        model = tf.keras.models.load_model(str(model_path))
        
        # Test d'inf√©rence
        test_input = np.random.random((2, 224, 224, 3)).astype(np.float32)
        predictions = model.predict(test_input, verbose=0)
        
        print(f"‚úÖ Mod√®le charg√© avec succ√®s")
        print(f"üìä Test batch - Forme: {predictions.shape}")
        print(f"üìä Pr√©dictions: {[f'{p[0]:.4f}' for p in predictions]}")
        
        # V√©rifier la structure
        print(f"\nüìã STRUCTURE MOD√àLE:")
        print(f"   ‚Ä¢ Input shape: {model.input_shape}")
        print(f"   ‚Ä¢ Output shape: {model.output_shape}")
        print(f"   ‚Ä¢ Nombre de couches: {len(model.layers)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False

def compare_models():
    """Comparer les 3 mod√®les Ba7ath"""
    print("\nüìä COMPARAISON MOD√àLES BA7ATH:")
    print("=" * 50)
    
    models_info = [
        ('deepfake_detector.h5', 'D√©tecteur Deepfake'),
        ('manipulation_detector.h5', 'D√©tecteur Manipulation'), 
        ('authenticity_scorer.h5', 'Scorer Authenticit√©')
    ]
    
    for model_file, description in models_info:
        model_path = Path(f'models/{model_file}')
        
        if model_path.exists():
            try:
                model = tf.keras.models.load_model(str(model_path))
                size_mb = model_path.stat().st_size / 1024 / 1024
                params = model.count_params()
                
                print(f"‚úÖ {description}:")
                print(f"   ‚Ä¢ Taille: {size_mb:.1f}MB")
                print(f"   ‚Ä¢ Param√®tres: {params:,}")
                print(f"   ‚Ä¢ Input: {model.input_shape}")
                print(f"   ‚Ä¢ Output: {model.output_shape}")
                
            except Exception as e:
                print(f"‚ùå {description}: Erreur chargement ({str(e)[:50]}...)")
        else:
            print(f"‚ö†Ô∏è {description}: Fichier manquant")

def main():
    """Fonction principale de correction"""
    print("üöÄ Ba7ath Deepfake Detector Fix v2.0")
    print("=" * 50)
    
    # √âtape 1: Correction du mod√®le
    if fix_deepfake_detector():
        print(f"\nüéâ CORRECTION R√âUSSIE !")
        
        # √âtape 2: V√©rification
        if verify_deepfake_model():
            print(f"\n‚úÖ V√âRIFICATION OK !")
            
            # √âtape 3: Comparaison
            compare_models()
            
            # Instructions finales
            print(f"\nüéØ PROCHAINES √âTAPES:")
            print(f"1. Lance: python analyze_image.py -i test.jpg -t full -v")
            print(f"2. V√©rifie que 'Mod√®les charg√©s: 3' appara√Æt")
            print(f"3. Teste l'analyse deepfake compl√®te")
            
            return True
        else:
            print(f"\n‚ö†Ô∏è Correction OK mais v√©rification √©chou√©e")
            return False
    else:
        print(f"\n‚ùå CORRECTION √âCHOU√âE")
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print(f"\nüéä D√©tecteur deepfake Ba7ath op√©rationnel !")
    else:
        print(f"\nüîß Debug n√©cessaire - contacte le support")
