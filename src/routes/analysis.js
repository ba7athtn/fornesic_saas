"use strict";

const express = require('express');
const router = express.Router();
const crypto = require('crypto');
const path = require('path');
const fs = require('fs').promises;

// ‚úÖ SERVICES BA7ATH
const rateLimitService = require('../services/rateLimitService');
const middlewareService = require('../services/middlewareService');
const cacheService = require('../services/cacheService');
const forensicService = require('../services/forensicService');
const analysisQueue = require('../services/analysisQueue');

// ‚úÖ CONTR√îLEURS
const {
  getComprehensiveAnalysis,
  initiateForensicAnalysis,
  getAnalysisStatus,
  compareForensicAnalyses,
  getForensicStatistics,
  getSessionSummary
} = require('../controllers/analysisController');

// ‚úÖ MIDDLEWARES
const {
  auth,
  optionalAuth,
  requireRole,
  requirePrivacyMode,
  forensicLogging
} = require('../middleware/auth');

const {
  validateForensicObjectId,
  validateForensicQuery
} = require('../middleware/validation');

// Config centralis√©e
const config = require('../config');

// =====================================
// CONFIGURATION CENTRALIS√âE (branch√©e)
// =====================================
const CONFIG = {
  rateLimits: {
    analysis: {
      limit: config.rateLimit?.analysis?.single?.limit ?? 50,
      window: config.rateLimit?.analysis?.single?.windowSeconds ?? 900
    },
    search: {
      limit: config.rateLimit?.analysis?.search?.limit ?? 30,
      window: config.rateLimit?.analysis?.search?.windowSeconds ?? 900
    },
    batch: {
      limit: config.rateLimit?.analysis?.batch?.limit ?? 5,
      window: config.rateLimit?.analysis?.batch?.windowSeconds ?? 3600
    },
    comparison: {
      limit: config.rateLimit?.analysis?.comparison?.limit ?? 20,
      window: config.rateLimit?.analysis?.comparison?.windowSeconds ?? 900
    },
    statistics: {
      limit: config.rateLimit?.analysis?.statistics?.limit ?? 20,
      window: config.rateLimit?.analysis?.statistics?.windowSeconds ?? 3600
    }
  },
  analysis: {
    validDepths: config.analysis?.validDepths ?? ['quick', 'standard', 'deep', 'comprehensive'],
    validComparisonModes: config.analysis?.validComparisonModes ?? ['quick', 'standard', 'deep', 'pixel-level'],
    estimatedTimes: config.analysis?.estimatedTimes ?? {
      quick: 8,
      standard: 25,
      deep: 52,
      comprehensive: 105
    },
    maxConcurrentAnalyses: config.analysis?.maxConcurrentAnalyses ?? 20,
    queueCapacity: config.analysis?.queueCapacity ?? 500
  },
  batch: {
    maxSizeAnalyst: config.analysis?.batch?.maxSizeAnalyst ?? 50,
    maxSizeAdmin: config.analysis?.batch?.maxSizeAdmin ?? 100,
    concurrencyLimit: config.analysis?.batch?.concurrencyLimit ?? 3,
    estimatedTimePerImage: config.analysis?.batch?.estimatedTimePerImage ?? 45
  },
  statistics: {
    validPeriods: config.analysis?.statistics?.validPeriods ?? ['7d', '30d', '90d', '1y'],
    validBreakdowns: config.analysis?.statistics?.validBreakdowns ?? ['hourly', 'daily', 'weekly', 'monthly']
  },
  cache: {
    analysisTTL: config.cache?.analysis?.analysisTTL ?? 1800,
    statusTTL: config.cache?.analysis?.statusTTL ?? 15,
    comparisonTTL: config.cache?.analysis?.comparisonTTL ?? 900,
    statisticsTTL: config.cache?.analysis?.statisticsTTL ?? 600,
    batchReportTTL: config.cache?.analysis?.batchReportTTL ?? 14400,
    serviceInfoTTL: config.cache?.analysis?.serviceInfoTTL ?? 900
  }
};

// =====================================
// RATE LIMITING FORENSIQUE
// =====================================
const forensicAnalysisRateLimit = rateLimitService.createCustomLimit({
  windowMs: CONFIG.rateLimits.analysis.window * 1000,
  max: CONFIG.rateLimits.analysis.limit,
  message: {
    success: false,
    error: 'Trop d\'analyses forensiques dans les 15 derni√®res minutes',
    type: 'ANALYSIS_RATE_LIMIT_EXCEEDED'
  }
});

const searchRateLimit = rateLimitService.createCustomLimit({
  windowMs: CONFIG.rateLimits.search.window * 1000,
  max: CONFIG.rateLimits.search.limit,
  message: {
    success: false,
    error: 'Trop de recherches dans les 15 derni√®res minutes',
    type: 'SEARCH_RATE_LIMIT_EXCEEDED'
  }
});

const batchRateLimit = rateLimitService.createCustomLimit({
  windowMs: CONFIG.rateLimits.batch.window * 1000,
  max: CONFIG.rateLimits.batch.limit,
  message: {
    success: false,
    error: 'Trop d\'analyses batch dans l\'heure',
    type: 'BATCH_RATE_LIMIT_EXCEEDED'
  }
});

const comparisonRateLimit = rateLimitService.createCustomLimit({
  windowMs: CONFIG.rateLimits.comparison.window * 1000,
  max: CONFIG.rateLimits.comparison.limit,
  message: {
    success: false,
    error: 'Trop de comparaisons dans les 15 derni√®res minutes',
    type: 'COMPARISON_RATE_LIMIT_EXCEEDED'
  }
});

const statisticsRateLimit = rateLimitService.createCustomLimit({
  windowMs: CONFIG.rateLimits.statistics.window * 1000,
  max: CONFIG.rateLimits.statistics.limit,
  message: {
    success: false,
    error: 'Trop de demandes de statistiques dans l\'heure',
    type: 'STATISTICS_RATE_LIMIT_EXCEEDED'
  }
});

// =====================================
// MIDDLEWARE FACTORY ANALYSIS
// =====================================
class AnalysisRoutesMiddleware {
  // ‚úÖ MIDDLEWARE S√âCURIT√â ANALYSE
  static analysisSecurityMiddleware = middlewareService.asyncHandler(async (req, res, next) => {
    req.requestId = req.requestId || crypto.randomBytes(8).toString('hex');
    req.analysisContext = {
      timestamp: new Date().toISOString(),
      userAgent: req.headers['user-agent']?.substring(0, 100),
      ipAddress: req.ip,
      requestId: req.requestId,
      user: req.user?.email
    };

    console.log(`üî¨ [${req.requestId}] Analysis request: ${req.method} ${req.path} by ${req.user?.email || 'anonymous'}`);
    next();
  });

  // ‚úÖ VALIDATION PARAM√àTRES ANALYSE
  static validateAnalysisParams = middlewareService.asyncHandler(async (req, res, next) => {
    const { enabledPillars, customWeights, analysisDepth } = req.body;

    if (enabledPillars && typeof enabledPillars !== 'object') {
      return res.status(400).json({
        success: false,
        error: 'enabledPillars doit √™tre un objet',
        type: 'INVALID_ENABLED_PILLARS',
        requestId: req.requestId
      });
    }

    if (customWeights && typeof customWeights !== 'object') {
      return res.status(400).json({
        success: false,
        error: 'customWeights doit √™tre un objet',
        type: 'INVALID_CUSTOM_WEIGHTS',
        requestId: req.requestId
      });
    }

    if (analysisDepth && !CONFIG.analysis.validDepths.includes(analysisDepth)) {
      return res.status(400).json({
        success: false,
        error: 'Profondeur d\'analyse invalide',
        type: 'INVALID_ANALYSIS_DEPTH',
        validDepths: CONFIG.analysis.validDepths,
        provided: analysisDepth,
        requestId: req.requestId
      });
    }

    next();
  });

  // ‚úÖ PIPELINES ANALYSE
  static get analysisPipeline() {
    return [
      this.analysisSecurityMiddleware,
      forensicAnalysisRateLimit,
      auth,
      forensicLogging,
      validateForensicObjectId('imageId'),
      validateForensicQuery
    ];
  }

  static get statusPipeline() {
    return [
      this.analysisSecurityMiddleware,
      auth,
      validateForensicObjectId('analysisId')
    ];
  }

  static get comparisonPipeline() {
    return [
      this.analysisSecurityMiddleware,
      comparisonRateLimit,
      auth,
      requireRole(['forensic_analyst', 'expert', 'admin']),
      forensicLogging
    ];
  }

  static get statisticsPipeline() {
    return [
      this.analysisSecurityMiddleware,
      statisticsRateLimit,
      auth,
      requireRole(['forensic_analyst', 'admin', 'auditor']),
      validateForensicQuery
    ];
  }

  static get batchPipeline() {
    return [
      this.analysisSecurityMiddleware,
      batchRateLimit,
      auth,
      requireRole(['forensic_analyst', 'admin']),
      requirePrivacyMode(['JUDICIAL', 'COMMERCIAL']),
      forensicLogging
    ];
  }

  static get batchStatusPipeline() {
    return [
      this.analysisSecurityMiddleware,
      auth
    ];
  }

  static get serviceInfoPipeline() {
    return [
      this.analysisSecurityMiddleware
    ];
  }
}

// =====================================
// GESTIONNAIRE CACHE ANALYSIS
// =====================================
class AnalysisCacheManager {
  static generateCacheKey(baseKey, params = {}, userLevel = 'user') {
    const paramsString = JSON.stringify({ ...params, userLevel });
    const hash = crypto.createHash('md5').update(paramsString).digest('hex');
    return `${baseKey}_${hash}`;
  }

  static async getAnalysisCache(imageId, params, userLevel) {
    const cacheKey = this.generateCacheKey(`analysis_${imageId}`, params, userLevel);
    try {
      const cached = await cacheService.getWithType('analysis', cacheKey);
      return { data: cached, key: cacheKey };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur cache analyse:`, error.message);
      return { data: null, key: cacheKey };
    }
  }

  static async setAnalysisCache(cacheKey, result) {
    try {
      await cacheService.setWithType('analysis', cacheKey, {
        data: result,
        cachedAt: new Date().toISOString()
      }, CONFIG.cache.analysisTTL);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde cache analyse:`, error.message);
    }
  }

  static async getStatusCache(analysisId) {
    const statusCacheKey = `analysis_status_${analysisId}`;
    try {
      const cached = await cacheService.getWithType('analysis_status', statusCacheKey);
      if (cached && cached.timestamp &&
          (Date.now() - new Date(cached.timestamp).getTime() < CONFIG.cache.statusTTL * 1000)) {
        return { data: cached, valid: true };
      }
      return { data: null, valid: false, key: statusCacheKey };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur cache status:`, error.message);
      return { data: null, valid: false, key: statusCacheKey };
    }
  }

  static async setStatusCache(analysisId, status) {
    const statusCacheKey = `analysis_status_${analysisId}`;
    try {
      await cacheService.setWithType('analysis_status', statusCacheKey, {
        ...status,
        timestamp: new Date().toISOString()
      }, CONFIG.cache.statusTTL);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde status:`, error.message);
    }
  }

  static async getComparisonCache(imageId1, imageId2, params) {
    const cacheKey1 = this.generateCacheKey(`comparison_${imageId1}_${imageId2}`, params);
    const cacheKey2 = this.generateCacheKey(`comparison_${imageId2}_${imageId1}`, params);
    
    try {
      const cached = await cacheService.getWithType('comparisons', cacheKey1) ||
                     await cacheService.getWithType('comparisons', cacheKey2);
      return { data: cached, keys: [cacheKey1, cacheKey2] };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur cache comparaison:`, error.message);
      return { data: null, keys: [cacheKey1, cacheKey2] };
    }
  }

  static async setComparisonCache(cacheKeys, result) {
    try {
      const cacheData = {
        data: result,
        cachedAt: new Date().toISOString()
      };

      await Promise.all(
        cacheKeys.map(key => 
          cacheService.setWithType('comparisons', key, cacheData, CONFIG.cache.comparisonTTL)
        )
      );
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde comparaison:`, error.message);
    }
  }

  static async getStatisticsCache(params, userLevel) {
    const cacheKey = this.generateCacheKey('forensic_stats', params, userLevel);
    try {
      const cached = await cacheService.getWithType('stats', cacheKey);
      return { data: cached, key: cacheKey };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur cache stats:`, error.message);
      return { data: null, key: cacheKey };
    }
  }

  static async setStatisticsCache(cacheKey, stats) {
    try {
      await cacheService.setWithType('stats', cacheKey, {
        data: stats,
        cachedAt: new Date().toISOString()
      }, CONFIG.cache.statisticsTTL);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde stats:`, error.message);
    }
  }

  static async getBatchReport(batchId) {
    try {
      const batchStatus = await cacheService.getWithType('analysis_batch', batchId);
      return batchStatus;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur cache batch:`, error.message);
      return null;
    }
  }

  static async setBatchReport(batchId, report) {
    try {
      await cacheService.setWithType('analysis_batch', batchId, report, CONFIG.cache.batchReportTTL);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde batch:`, error.message);
    }
  }

  static async getServiceInfo() {
    const infoCacheKey = 'analysis_service_info';
    try {
      const cached = await cacheService.getWithType('service_info', infoCacheKey);
      if (cached && cached.timestamp &&
          (Date.now() - new Date(cached.timestamp).getTime() < CONFIG.cache.serviceInfoTTL * 1000)) {
        return { data: cached, cached: true };
      }
      return { data: null, cached: false, key: infoCacheKey };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur cache info service:`, error.message);
      return { data: null, cached: false, key: infoCacheKey };
    }
  }

  static async setServiceInfo(serviceInfo) {
    const infoCacheKey = 'analysis_service_info';
    try {
      await cacheService.setWithType('service_info', infoCacheKey, serviceInfo, CONFIG.cache.serviceInfoTTL);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erreur sauvegarde info service:`, error.message);
    }
  }
}

// =====================================
// UTILITAIRES ANALYSIS
// =====================================
class AnalysisUtilities {
  static formatDuration(seconds) {
    if (seconds < 60) return `${seconds}s`;
    if (seconds < 3600) return `${Math.floor(seconds / 60)}m${seconds % 60}s`;
    return `${Math.floor(seconds / 3600)}h${Math.floor((seconds % 3600) / 60)}m`;
  }

  static getUserLevel(user) {
    if (!user || !user.roles) return 'user';
    if (user.roles.includes('admin')) return 'admin';
    if (user.roles.includes('forensic_analyst')) return 'analyst';
    if (user.roles.includes('auditor')) return 'auditor';
    return 'user';
  }

  static calculateBatchMetrics(batchStatus) {
    const currentTime = new Date();
    const createdTime = new Date(batchStatus.timestamp);
    const elapsedTime = Math.round((currentTime - createdTime) / 1000);
    const completed = batchStatus.successful + batchStatus.failed;

    return {
      runtime: {
        elapsed: elapsedTime,
        elapsedFormatted: this.formatDuration(elapsedTime),
        estimatedRemaining: batchStatus.status === 'processing'
          ? Math.max(0, Math.round((batchStatus.total * CONFIG.batch.estimatedTimePerImage) - elapsedTime))
          : 0
      },
      progress: {
        completed,
        total: batchStatus.total,
        percentage: Math.round((completed / batchStatus.total) * 100)
      },
      performance: {
        avgTimePerImage: elapsedTime > 0 && completed > 0
          ? Math.round(elapsedTime / completed)
          : 0,
        successRate: batchStatus.total > 0
          ? Math.round((batchStatus.successful / batchStatus.total) * 100)
          : 0
      }
    };
  }

  static getSystemInfo() {
    return {
      nodeVersion: process.version,
      platform: process.platform,
      uptime: Math.round(process.uptime()),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
        rss: Math.round(process.memoryUsage().rss / 1024 / 1024)
      }
    };
  }

  static async verifyImagesExistAndAccessible(imageIds, privacyMode) {
    try {
      const Image = require('../models/Image');
      const images = await Image.find({
        _id: { $in: imageIds }
      }).select('_id privacyMode originalName status');

      const foundIds = images.map(img => img._id.toString());
      const missingIds = imageIds.filter(id => !foundIds.includes(id));

      if (missingIds.length > 0) {
        return {
          valid: false,
          error: `${missingIds.length} image(s) non trouv√©e(s)`,
          type: 'IMAGES_NOT_FOUND',
          missingIds: missingIds.slice(0, 5),
          missingCount: missingIds.length
        };
      }

      const needsJudicial = images.some(img => img.privacyMode === 'JUDICIAL');
      if (needsJudicial && privacyMode !== 'JUDICIAL') {
        return {
          valid: false,
          error: 'Niveau de confidentialit√© JUDICIAL requis pour certaines images',
          type: 'PRIVACY_LEVEL_INSUFFICIENT',
          required: 'JUDICIAL',
          provided: privacyMode
        };
      }

      return { valid: true, images };
    } catch (error) {
      return {
        valid: false,
        error: 'Erreur v√©rification images',
        type: 'VERIFICATION_ERROR',
        details: error.message
      };
    }
  }
}

// =====================================
// HANDLERS ANALYSIS S√âPAR√âS
// =====================================
class AnalysisHandlers {
  // ... (handlers handleComprehensiveAnalysis, handleAnalysisStatus, handleForensicComparison, handleForensicStatistics comme ci-dessus)

  // ‚úÖ HANDLER ANALYSE BATCH
  static async handleBatchAnalysis(req, res) {
    const { imageIds, batchConfig = {}, priority = 'batch' } = req.body;

    console.log(`üì¶ [${req.requestId}] Analyse batch: ${imageIds?.length || 0} images par ${req.user?.sub}`);

    if (!imageIds || !Array.isArray(imageIds) || imageIds.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Liste d\'IDs d\'images requise pour analyse batch',
        type: 'MISSING_IMAGE_IDS',
        requestId: req.requestId
      });
    }

    const maxBatchSize = req.user?.roles?.includes('admin') ? 
      CONFIG.batch.maxSizeAdmin : CONFIG.batch.maxSizeAnalyst;
    
    if (imageIds.length > maxBatchSize) {
      return res.status(400).json({
        success: false,
        error: `Maximum ${maxBatchSize} images par batch`,
        type: 'BATCH_SIZE_EXCEEDED',
        maxSize: maxBatchSize,
        provided: imageIds.length,
        userRole: req.user?.roles,
        requestId: req.requestId
      });
    }

    const uniqueIds = [...new Set(imageIds)];
    if (uniqueIds.length !== imageIds.length) {
      return res.status(400).json({
        success: false,
        error: 'IDs d\'images en double d√©tect√©s',
        type: 'DUPLICATE_IMAGE_IDS',
        duplicateCount: imageIds.length - uniqueIds.length,
        requestId: req.requestId
      });
    }

    const verificationResult = await AnalysisUtilities.verifyImagesExistAndAccessible(
      uniqueIds, req.privacyMode
    );

    if (!verificationResult.valid) {
      return res.status(verificationResult.type === 'IMAGES_NOT_FOUND' ? 404 : 403).json({
        success: false,
        ...verificationResult,
        requestId: req.requestId
      });
    }

    const batchId = crypto.randomBytes(12).toString('hex');
    const results = [];
    let queueAvailable = true;

    try {
      console.log(`üîÑ [${req.requestId}] Tentative queue asynchrone pour batch ${batchId}`);

      for (const imageId of uniqueIds) {
        try {
          const job = await analysisQueue.addAnalysisJob(`batch_${batchId}_${imageId}`, {
            priority: priority || 'batch',
            config: {
              ...batchConfig,
              enabledPillars: batchConfig.enabledPillars || {
                aiDetection: true,
                manipulation: true,
                authenticity: true,
                metadata: false
              },
              analysisDepth: batchConfig.analysisDepth || 'standard'
            },
            userId: req.user?.sub,
            batchId,
            privacyMode: req.privacyMode,
            requestId: req.requestId,
            timestamp: new Date().toISOString()
          });

          results.push({
            imageId,
            success: true,
            jobId: job.id,
            status: 'queued',
            priority: priority || 'batch'
          });
        } catch (jobError) {
          console.error(`‚ùå [${req.requestId}] Erreur job ${imageId}:`, jobError.message);
          results.push({
            imageId,
            success: false,
            error: jobError.message,
            type: 'JOB_CREATION_FAILED'
          });
        }
      }

    } catch (queueError) {
      console.warn(`‚ö†Ô∏è [${req.requestId}] Queue indisponible, fallback synchrone:`, queueError.message);
      queueAvailable = false;
      results.length = 0;
    }

    if (!queueAvailable) {
      console.log(`üîÑ [${req.requestId}] Traitement synchrone batch ${batchId}`);

      const batchChunks = [];
      for (let i = 0; i < uniqueIds.length; i += CONFIG.batch.concurrencyLimit) {
        batchChunks.push(uniqueIds.slice(i, i + CONFIG.batch.concurrencyLimit));
      }

      for (const chunk of batchChunks) {
        const chunkPromises = chunk.map(async (imageId) => {
          try {
            const mockReq = {
              params: { imageId },
              body: {
                enabledPillars: batchConfig.enabledPillars,
                customWeights: batchConfig.customWeights,
                analysisDepth: batchConfig.analysisDepth || 'standard',
                priority: 'batch_direct'
              },
              user: req.user,
              privacyMode: req.privacyMode,
              requestId: req.requestId,
              analysisConfig: null
            };

            const mockRes = {
              status: () => mockRes,
              json: (data) => data
            };

            const result = await initiateForensicAnalysis(mockReq, mockRes);
            return {
              imageId,
              success: true,
              analysisId: result?.analysisId || `sync_${imageId}`,
              status: 'initiated_sync'
            };
          } catch (error) {
            return {
              imageId,
              success: false,
              error: error.message,
              type: 'SYNC_ANALYSIS_FAILED'
            };
          }
        });

        const chunkResults = await Promise.allSettled(chunkPromises);
        results.push(...chunkResults.map(r => r.value || {
          success: false,
          error: 'Promise settled avec rejet'
        }));
      }
    }

    const successCount = results.filter(r => r.success).length;
    const errorCount = results.length - successCount;

    // Sauvegarder rapport batch
    const batchReport = {
      batchId,
      type: 'analysis_batch',
      total: uniqueIds.length,
      successful: successCount,
      failed: errorCount,
      results,
      status: 'processing',
      processingMethod: queueAvailable ? 'asynchronous_queue' : 'synchronous_direct',
      config: batchConfig,
      priority,
      createdBy: req.user?.sub,
      privacyMode: req.privacyMode,
      estimatedCompletion: new Date(Date.now() + (uniqueIds.length * CONFIG.batch.estimatedTimePerImage * 1000)).toISOString(),
      timestamp: new Date().toISOString()
    };

    await AnalysisCacheManager.setBatchReport(batchId, batchReport);
    console.log(`üíæ [${req.requestId}] Batch rapport sauvegard√©: ${batchId}`);
    console.log(`üìä [${req.requestId}] Batch cr√©√© ${batchId}: ${successCount}‚úÖ ${errorCount}‚ùå (${queueAvailable ? 'async' : 'sync'})`);

    res.set('Cache-Control', 'private, max-age=30');
    res.status(202).json({
      success: true,
      message: `Analyse batch initi√©e: ${successCount} succ√®s, ${errorCount} erreurs`,
      batchId,
      summary: {
        total: uniqueIds.length,
        successful: successCount,
        failed: errorCount,
        processingMethod: queueAvailable ? 'asynchronous' : 'synchronous',
        priority
      },
      results,
      tracking: {
        statusUrl: `/api/analysis/batch/${batchId}/status`,
        estimatedCompletion: batchReport.estimatedCompletion
      },
      requestId: req.requestId,
      timestamp: new Date().toISOString()
    });
  }

  // ‚úÖ HANDLER STATUS BATCH
  static async handleBatchStatus(req, res) {
    const { batchId } = req.params;

    console.log(`üìä [${req.requestId}] Status batch analyse: ${batchId}`);

    try {
      const batchStatus = await AnalysisCacheManager.getBatchReport(batchId);

      if (!batchStatus) {
        return res.status(404).json({
          success: false,
          error: 'Batch analyse non trouv√©',
          type: 'ANALYSIS_BATCH_NOT_FOUND',
          batchId,
          requestId: req.requestId
        });
      }

      const canAccess = req.user?.roles?.includes('admin') ||
                       batchStatus.createdBy === req.user?.sub;

      if (!canAccess) {
        return res.status(403).json({
          success: false,
          error: 'Acc√®s non autoris√© √† ce batch',
          type: 'BATCH_ACCESS_DENIED',
          batchId,
          requestId: req.requestId
        });
      }

      const metrics = AnalysisUtilities.calculateBatchMetrics(batchStatus);
      const enrichedStatus = {
        ...batchStatus,
        ...metrics
      };

      res.set('Cache-Control', 'private, max-age=5');
      res.json({
        success: true,
        batch: enrichedStatus,
        requestId: req.requestId,
        retrievedAt: new Date().toISOString()
      });

    } catch (error) {
      console.error(`‚ùå [${req.requestId}] Erreur status batch:`, error);
      return res.status(500).json({
        success: false,
        error: 'Erreur r√©cup√©ration status batch',
        details: error.message,
        batchId,
        requestId: req.requestId
      });
    }
  }

  // ‚úÖ HANDLER SERVICE INFO
  static async handleServiceInfo(req, res) {
    console.log(`‚ÑπÔ∏è [${req.requestId}] Info service analyse forensique`);

    const cachedInfo = await AnalysisCacheManager.getServiceInfo();
    if (cachedInfo.cached) {
      res.set('Cache-Control', 'public, max-age=300');
      return res.json({
        ...cachedInfo.data,
        cached: true,
        requestId: req.requestId
      });
    }

    try {
      const serviceInfo = {
        service: 'Ba7ath Forensic Analysis API',
        version: '3.0.0-ba7ath-prod',
        description: 'Service d\'analyse forensique avanc√©e avec IA, comparaisons et statistiques',

        endpoints: {
          'GET /:imageId': {
            description: 'Analyse forensique compl√®te d\'une image',
            authentication: 'required',
            cached: '30 minutes',
            analysisDepths: CONFIG.analysis.validDepths
          },
          'POST /:imageId': {
            description: 'Initier nouvelle analyse forensique',
            authentication: 'required',
            roles: ['forensic_analyst', 'admin'],
            rateLimit: `${CONFIG.rateLimits.analysis.limit} analyses / ${CONFIG.rateLimits.analysis.window / 60} minutes`
          },
          'GET /:analysisId/status': {
            description: 'Status analyse en temps r√©el',
            authentication: 'required',
            cached: '15 secondes'
          },
          'POST /compare': {
            description: 'Comparaison forensique entre deux images',
            authentication: 'required',
            roles: ['forensic_analyst', 'expert', 'admin'],
            modes: CONFIG.analysis.validComparisonModes,
            cached: '15 minutes'
          },
          'GET /statistics': {
            description: 'Statistiques analyses forensiques',
            authentication: 'required',
            roles: ['forensic_analyst', 'admin', 'auditor'],
            periods: CONFIG.statistics.validPeriods,
            breakdowns: CONFIG.statistics.validBreakdowns
          },
          'POST /batch': {
            description: `Analyse batch jusqu'√† ${CONFIG.batch.maxSizeAdmin} images`,
            authentication: 'required',
            roles: ['forensic_analyst', 'admin'],
            maxBatchSize: {
              analyst: CONFIG.batch.maxSizeAnalyst,
              admin: CONFIG.batch.maxSizeAdmin
            }
          }
        },

        features: [
          'Analyse forensique multi-piliers (IA, manipulation, authenticit√©)',
          'Cache intelligent Redis multi-niveaux avec TTL optimis√©s',
          'Comparaisons forensiques avanc√©es avec modes personnalisables',
          'Statistiques d√©taill√©es avec filtrage et regroupement',
          'Analyse batch asynchrone avec queue et fallback synchrone',
          'Status temps r√©el avec m√©triques de performance',
          'Rate limiting adaptatif par r√¥le utilisateur',
          'Privacy modes (JUDICIAL/COMMERCIAL) avec contr√¥le d\'acc√®s',
          'Audit logging complet pour tra√ßabilit√© forensique',
          'Validation stricte et s√©curit√© renforc√©e'
        ],

        analysisCapabilities: {
          pillars: {
            aiDetection: 'D√©tection deepfakes et contenu g√©n√©r√© par IA',
            manipulation: 'Analyse modifications et retouches',
            authenticity: 'Score global d\'authenticit√©',
            metadata: 'Extraction et analyse m√©tadonn√©es EXIF',
            statistical: 'Analyse statistique propri√©t√©s image'
          },
          depths: {
            quick: `Analyse rapide (${CONFIG.analysis.estimatedTimes.quick}s)`,
            standard: `Analyse standard compl√®te (${CONFIG.analysis.estimatedTimes.standard}s)`,
            deep: `Analyse approfondie (${CONFIG.analysis.estimatedTimes.deep}s)`,
            comprehensive: `Analyse exhaustive (${CONFIG.analysis.estimatedTimes.comprehensive}s)`
          }
        },

        performance: {
          avgAnalysisTime: Object.entries(CONFIG.analysis.estimatedTimes)
            .reduce((acc, [key, value]) => ({ ...acc, [key]: `${value}s` }), {}),
          maxConcurrentAnalyses: CONFIG.analysis.maxConcurrentAnalyses,
          queueCapacity: `${CONFIG.analysis.queueCapacity} jobs`
        },

        limits: {
          maxImageSize: '50MB',
          maxBatchSize: {
            analyst: CONFIG.batch.maxSizeAnalyst,
            admin: CONFIG.batch.maxSizeAdmin
          },
          supportedFormats: ['JPEG', 'PNG', 'WEBP', 'TIFF'],
          rateLimits: {
            analysis: `${CONFIG.rateLimits.analysis.limit}/${CONFIG.rateLimits.analysis.window / 60}min`,
            comparison: `${CONFIG.rateLimits.comparison.limit}/${CONFIG.rateLimits.comparison.window / 60}min`,
            batch: `${CONFIG.rateLimits.batch.limit}/hour`,
            search: `${CONFIG.rateLimits.search.limit}/${CONFIG.rateLimits.search.window / 60}min`
          }
        },

        system: AnalysisUtilities.getSystemInfo(),
        requestId: req.requestId,
        timestamp: new Date().toISOString()
      };

      await AnalysisCacheManager.setServiceInfo(serviceInfo);

      res.set('Cache-Control', 'public, max-age=300');
      res.json(serviceInfo);
    } catch (error) {
      console.error(`‚ùå [${req.requestId}] Erreur info service:`, error);
      return res.status(500).json({
        success: false,
        error: 'Erreur r√©cup√©ration informations service',
        details: error.message,
        requestId: req.requestId
      });
    }
  }
}

// =====================================
// GESTIONNAIRE D'ERREURS ANALYSIS
// =====================================
class AnalysisErrorHandler {
  static enrichErrorContext(error, req) {
    return {
      success: false,
      error: error.message || 'Erreur inconnue',
      type: error.type || 'ANALYSIS_ERROR',
      context: {
        route: 'analysis',
        method: req.method,
        path: req.path,
        userId: req.user?.sub || 'anonymous',
        userRoles: req.user?.roles || [],
        analysisType: req.query?.analysisDepth || req.body?.analysisDepth || 'unknown',
        privacyMode: req.privacyMode || 'unknown',
        imageId: req.params?.imageId || req.params?.analysisId || 'unknown'
      },
      requestId: req.requestId,
      timestamp: new Date().toISOString()
    };
  }

  static getStatusCodeForError(error) {
    if (error.type?.includes('VALIDATION_') || error.type?.includes('INVALID_')) return 400;
    if (error.type?.includes('UNAUTHORIZED') || error.type?.includes('ACCESS_')) return 403;
    if (error.type?.includes('NOT_FOUND')) return 404;
    if (error.type?.includes('TIMEOUT')) return 408;
    if (error.type?.includes('TOO_LARGE') || error.type?.includes('EXCEEDED')) return 413;
    if (error.type?.includes('RATE_LIMIT')) return 429;
    if (error.type?.includes('UNAVAILABLE') || error.type?.includes('BUSY')) return 503;
    return 500;
  }
}

// =====================================
// ROUTES ANALYSIS OPTIMIS√âES
// =====================================

router.get('/:imageId',
  ...AnalysisRoutesMiddleware.analysisPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleComprehensiveAnalysis)
);

router.get('/:analysisId/status',
  ...AnalysisRoutesMiddleware.statusPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleAnalysisStatus)
);

router.post('/compare',
  ...AnalysisRoutesMiddleware.comparisonPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleForensicComparison)
);

router.get('/statistics',
  ...AnalysisRoutesMiddleware.statisticsPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleForensicStatistics)
);

router.post('/batch',
  ...AnalysisRoutesMiddleware.batchPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleBatchAnalysis)
);

router.get('/batch/:batchId/status',
  ...AnalysisRoutesMiddleware.batchStatusPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleBatchStatus)
);

router.get('/',
  ...AnalysisRoutesMiddleware.serviceInfoPipeline,
  middlewareService.asyncHandler(AnalysisHandlers.handleServiceInfo)
);

// =====================================
// ROUTES DEBUG (DEV UNIQUEMENT)
// =====================================
if (process.env.NODE_ENV !== 'production') {
  router.get('/debug/cache-stats',
    auth,
    requireRole(['admin', 'developer']),
    middlewareService.asyncHandler(async (req, res) => {
      try {
        const cacheStats = await cacheService.getStats();
        const analysisCacheStats = {
          analysis: await cacheService.getTypeStats('analysis'),
          analysis_status: await cacheService.getTypeStats('analysis_status'),
          comparisons: await cacheService.getTypeStats('comparisons'),
          stats: await cacheService.getTypeStats('stats'),
          analysis_batch: await cacheService.getTypeStats('analysis_batch')
        };

        return res.json({
          success: true,
          global: cacheStats,
          analysis: analysisCacheStats,
          system: AnalysisUtilities.getSystemInfo(),
          requestId: req.requestId,
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        return res.status(500).json({
          success: false,
          error: 'Erreur stats cache debug analysis',
          details: error.message,
          requestId: req.requestId
        });
      }
    })
  );
}

// =====================================
// GESTION D'ERREURS ANALYSIS
// =====================================
router.use((error, req, res, next) => {
  const requestId = req.requestId || crypto.randomBytes(8).toString('hex');
  console.error(`‚ùå [${requestId}] Erreur route analyse:`, error);

  const enrichedError = AnalysisErrorHandler.enrichErrorContext(error, req);
  const statusCode = AnalysisErrorHandler.getStatusCodeForError(error);

  if (!res.headersSent) {
    res.status(statusCode).json(enrichedError);
  }
});

// =====================================
// EXPORT ROUTER ANALYSIS
// =====================================
module.exports = router;

// ‚úÖ LOG MIGRATION COMPL√àTE
console.log('üéâ BA7ATH ANALYSIS ROUTES MIGRATION COMPL√àTE !');
console.log('üî¨ Routes disponibles: analyse compl√®te, status, comparaison, statistiques, batch');
console.log('üîê S√©curit√©: auth requis, validation r√¥les, privacy modes, rate limiting');
console.log('‚ö° Performance: cache intelligent multi-niveaux, fallback queue‚Üísync');
console.log('üõ°Ô∏è Observabilit√©: logging forensique, m√©triques temps r√©el, audit trail');
console.log('üéØ Pr√™t pour production Ba7ath Enterprise Analysis !');
