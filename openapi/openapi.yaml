openapi: 3.1.0
info:
  title: Ba7ath Forensic API
  version: 3.0.1
  description: >
    API d'authentification et endpoints métiers Ba7ath Forensic (JWT stateless, rate limiting, cache).
servers:
  - url: /api
    description: Local (préfixe API)

tags:
  - name: auth
    description: Endpoints d'authentification
  - name: images
    description: Endpoints de gestion d'images forensiques

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    X-RateLimit-Limit:
      description: Nombre max de requêtes autorisées sur la fenêtre en cours
      schema: { type: integer, example: 100 }
    X-RateLimit-Remaining:
      description: Requêtes restantes dans la fenêtre en cours
      schema: { type: integer, example: 87 }
    X-RateLimit-Reset:
      description: Timestamp Unix du reset de la fenêtre
      schema: { type: integer, example: 1694102400 }
    X-RateLimit-Window:
      description: Taille de la fenêtre en secondes
      schema: { type: integer, example: 900 }
    X-RateLimit-Action:
      description: Code logique du limiter appliqué
      schema: { type: string, example: login_attempt }
    RateLimit-Policy:
      description: Politique de limitation "<limit>;w=<window>"
      schema: { type: string, example: "20;w=3600" }
    RateLimit-Limit:
      description: Nombre max de requêtes autorisées dans la fenêtre
      schema: { type: integer, example: 20 }
    RateLimit-Remaining:
      description: Requêtes restantes dans la fenêtre courante
      schema: { type: integer, example: 19 }
    RateLimit-Reset:
      description: Secondes restantes avant reset de la fenêtre
      schema: { type: integer, example: 3540 }
  schemas:
    Error:
      type: object
      properties:
        success: { type: boolean, example: false }
        error: { type: string, example: "Erreur lors de la connexion" }
        type: { type: string, example: "LOGIN_ERROR" }
        requestId: { type: string, example: "a1b2c3d4e5f6" }
    TokenPair:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
    User:
      type: object
      properties:
        id: { type: string, example: "68be60ce3bb0afd3ce86b8f5" }
        email: { type: string, format: email }
        roles: { type: array, items: { type: string } }
        profile:
          type: object
          properties:
            firstName: { type: string }
            lastName: { type: string }
        security:
          type: object
          properties:
            lastLogin: { type: string, format: date-time }
            lastLoginIP: { type: string }
            lastActivity: { type: string, format: date-time }
            lastActivityIP: { type: string }
            lastActivityUA: { type: string }
    ProfileResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        user: { $ref: '#/components/schemas/User' }
        cached: { type: boolean, example: false }
        requestId: { type: string }
        timestamp: { type: string, format: date-time }
    LoginResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: "Connexion réussie" }
        user: { $ref: '#/components/schemas/User' }
        tokens: { $ref: '#/components/schemas/TokenPair' }
        session:
          type: object
          properties:
            id: { type: string }
            expiresAt: { type: string, format: date-time }
            deviceInfo: { type: object }
        requestId: { type: string }

paths:
  /auth/login:
    post:
      tags: [auth]
      summary: Connexion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                rememberMe: { type: boolean, default: false }
      responses:
        '200':
          description: Connexion réussie
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/X-RateLimit-Limit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
            X-RateLimit-Window: { $ref: '#/components/headers/X-RateLimit-Window' }
            X-RateLimit-Action: { $ref: '#/components/headers/X-RateLimit-Action' }
          content:
            application/json:
              schema:
                type: object
                required: [success, message, user, tokens, session]
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Connexion réussie" }
                  user: { $ref: '#/components/schemas/User' }
                  tokens:
                    type: object
                    properties:
                      accessToken: { type: string }
                      refreshToken: { type: string }
                  session:
                    type: object
                    properties:
                      id: { type: string }
                      expiresAt: { type: string, format: date-time }
                      deviceInfo: { type: object }
        '400':
          description: Données invalides
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '403':
          description: Compte suspendu/non vérifié
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '423':
          description: Compte verrouillé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '429':
          description: Trop de tentatives
          headers:
            Retry-After:
              description: Secondes avant de réessayer
              schema: { type: integer, example: 900 }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Erreur serveur interne
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/refresh:
    post:
      tags: [auth]
      summary: Rafraîchir les tokens JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string, minLength: 32 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  tokens: { $ref: '#/components/schemas/TokenPair' }
                  user: { $ref: '#/components/schemas/User' }
                  requestId: { type: string }
                  timestamp: { type: string, format: date-time }
        '401': { description: Token invalide/révoqué, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '429': { description: Trop de refresh, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/profile:
    get:
      tags: [auth]
      summary: Profil utilisateur (stateless)
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/ProfileResponse' } } } }
        '401': { description: Non authentifié, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/logout:
    post:
      tags: [auth]
      summary: Déconnexion (révocation de la session courante si token présent)
      description: Accessible avec ou sans token; si un Bearer token valide est présent, il est révoqué. Sinon, réponse neutre.
      responses:
        '200':
          description: Déconnexion effectuée
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Déconnexion réussie" }
                  sessionsRevoked: { type: integer, example: 1 }
                  requestId: { type: string }

  /auth/logout-all:
    post:
      tags: [auth]
      summary: Déconnexion globale de toutes les sessions
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Sessions révoquées
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  revokedSessions: { type: integer }
                  userId: { type: string }
                  requestId: { type: string }
        '401': { description: Non authentifié, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/change-password:
    post:
      tags: [auth]
      summary: Changement de mot de passe
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword, confirmNewPassword]
              properties:
                currentPassword: { type: string, minLength: 8 }
                newPassword: { type: string, minLength: 8 }
                confirmNewPassword: { type: string, minLength: 8 }
      responses:
        '200': { description: Mot de passe changé, content: { application/json: { schema: { type: object, properties: { success: { type: boolean, example: true }, message: { type: string, example: "Mot de passe modifié avec succès" } } } } } }
        '400': { description: Requête invalide, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Non authentifié, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '429': { description: Limite horaire atteinte, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/verify-email/{token}:
    get:
      tags: [auth]
      summary: Vérifier l'email à l'aide d'un token
      parameters:
        - name: token
          in: path
          required: true
          schema: { type: string, minLength: 32 }
      responses:
        '200':
          description: Email vérifié ou déjà vérifié
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Email vérifié avec succès" }
                  alreadyVerified: { type: boolean, example: false }
                  verifiedAt: { type: string, format: date-time }
                  requestId: { type: string }
        '400': { description: Token invalide, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '500': { description: Erreur serveur, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/resend-verification:
    post:
      tags: [auth]
      summary: Renvoyer un OTP de vérification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Code renvoyé si le compte existe et n'est pas vérifié
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string, example: "Code de vérification renvoyé" }
                  expiresInMinutes: { type: integer, example: 15 }
                  requestId: { type: string }
        '400': { description: Email invalide, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '500': { description: Erreur serveur, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/verify-email-otp:
    post:
      tags: [auth]
      summary: Vérifier l'OTP de vérification d'email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code]
              properties:
                email: { type: string, format: email }
                code: { type: string, pattern: '^\d{6}$' }
      responses:
        '200':
          description: Email vérifié ou déjà vérifié
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  alreadyVerified: { type: boolean }
                  requestId: { type: string }
        '400': { description: OTP invalide/expiré, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/request-password-reset:
    post:
      tags: [auth]
      summary: Demander un reset de mot de passe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Réponse neutre
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  requestId: { type: string }
        '429': { description: Trop de demandes, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/reset-password/{token}:
    post:
      tags: [auth]
      summary: Réinitialiser le mot de passe via token
      parameters:
        - name: token
          in: path
          required: true
          schema: { type: string, minLength: 32 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password, confirmPassword]
              properties:
                password: { type: string, minLength: 8 }
                confirmPassword: { type: string, minLength: 8 }
      responses:
        '200':
          description: Mot de passe réinitialisé
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string, example: "Mot de passe réinitialisé" }
                  requestId: { type: string }
        '400': { description: Token invalide/déjà utilisé ou mot de passe faible, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/sessions:
    get:
      tags: [auth]
      summary: Lister les sessions actives de l'utilisateur
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Liste des sessions actives
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        createdAt: { type: string, format: date-time }
                        lastActivity: { type: string, format: date-time }
                        deviceInfo: { type: object }
                        location: { type: object }
                        security: { type: object }
                  total: { type: integer }
                  requestId: { type: string }
                  timestamp: { type: string, format: date-time }
        '401': { description: Non authentifié, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /auth/revoke-session/{sessionId}:
    post:
      tags: [auth]
      summary: Révoquer une session spécifique
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema: { type: string, minLength: 24, maxLength: 24 }
      responses:
        '200':
          description: Session révoquée
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string, example: "Session révoquée avec succès" }
                  sessionId: { type: string }
                  revokedAt: { type: string, format: date-time }
                  requestId: { type: string }
        '400': { description: ID de session invalide, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Session non trouvée, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Non authentifié, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /images/upload:
    post:
      tags: [images]
      summary: Upload image unique avec analyse rapide
      description: Upload d'un fichier image via multipart/form-data (champ "image")
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [image]
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image uploadée
          headers:
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '400': { description: Fichier manquant/invalide }
        '401': { description: Non authentifié (si requis) }
        '429':
          description: Limite atteinte
          headers:
            Retry-After: { description: Secondes avant un nouvel essai, schema: { type: integer, example: 60 } }

  /images/upload/multiple:
    post:
      tags: [images]
      summary: Upload multiple (max 20)
      description: Upload de plusieurs images via multipart/form-data (champ "images")
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [images]
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '202':
          description: Batch accepté pour traitement
          headers:
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
        '400': { description: Requête invalide (taille batch) }
        '401': { description: Non authentifié }
        '403': { description: Rôle insuffisant }
        '429':
          description: Limite atteinte
          headers:
            Retry-After: { description: Secondes avant un nouvel essai, schema: { type: integer, example: 60 } }

  /images/{imageId}/download:
    get:
      tags: [images]
      summary: Télécharger un fichier image
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: imageId
          in: path
          required: true
          schema: { type: string, minLength: 24, maxLength: 24 }
        - name: type
          in: query
          required: false
          schema: { type: string, enum: [original, thumbnail, processed], default: original }
      responses:
        '200':
          description: Fichier renvoyé
          headers:
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
            RateLimit-Limit: { $ref: '#/components/headers/RateLimit-Limit' }
            RateLimit-Remaining: { $ref: '#/components/headers/RateLimit-Remaining' }
            RateLimit-Reset: { $ref: '#/components/headers/RateLimit-Reset' }
          content:
            application/octet-stream:
              schema: { type: string, format: binary }
        '401': { description: Non authentifié }
        '403': { description: Confidentialité insuffisante }
        '404': { description: Image ou fichier introuvable }
        '429':
          description: Limite atteinte
          headers:
            Retry-After: { description: Secondes avant un nouvel essai, schema: { type: integer, example: 60 } }

  /images:
    get:
      tags: [images]
      summary: Lister les images forensiques
      description: Récupérer la liste paginée des images avec filtres optionnels
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 1, default: 1 }
        - name: limit
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: Liste des images récupérée
          headers:
            RateLimit-Policy: { $ref: '#/components/headers/RateLimit-Policy' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data: { type: array, items: { type: object } }
                  pagination: { type: object }
                  requestId: { type: string }
        '401': { description: Non authentifié }
        '429': { description: Limite atteinte }

  /images/test:
    get:
      tags: [images]
      summary: Route de test pour validation API
      description: Endpoint de test pour vérifier la connectivité du service images
      security: []
      responses:
        '200':
          description: Test réussi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Service images opérationnel" }
                  timestamp: { type: string, format: date-time }
